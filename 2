// One simple way to encrypt a string is to "rotate" every alphanumeric character by a certain amount.
// Rotating a character means replacing it with another character that is a certain number of steps away in normal alphabetic or numerical order.
// For example, if the string "Zebra-493?" is rotated 3 places, the resulting string is "Cheud-726?".
// Every alphabetic character is replaced with the character 3 letters higher (wrapping around from Z to A),
// and every numeric character replaced with the character 3 digits higher (wrapping around from 9 to 0).
// Note that the non-alphanumeric characters remain unchanged.
//
// Given a string and a rotation factor, return an encrypted string.
//
// Signature
// string rotationalCipher(string input, int rotationFactor)

export function rotationalCipher(input: string, rotationFactor: number) {
  const capital = [
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
  ];
  const lowerCase = [
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
  ];
  const nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

  const letterMod = rotationFactor % capital.length;
  const numberMod = rotationFactor % nums.length;

  const letterIdxList = capital.map((_, i) => {
    let potentialOffset = i + letterMod;

    if (potentialOffset > capital.length - 1) {
      return potentialOffset;
    }

    return potentialOffset - capital.length;
  });

  console.log('letterIdxList: ', letterIdxList);

  const numIdxList = nums.map((_, i) => {
    let potentialOffset = i + numberMod;

    if (potentialOffset > nums.length - 1) {
      return potentialOffset;
    }

    return potentialOffset - nums.length;
  });

  let splitInput = input.split('-');

  console.log('split input: ', splitInput);
  splitInput = splitInput.map(splitVals => {
    let returnList = '';
    for (let i = 0; i < splitVals.length; i++) {
      const ascii = splitVals.charCodeAt(i);

      if (ascii >= 65 && ascii <= 90) {
        returnList += capital[letterIdxList[capital.indexOf(splitVals[i])]];
        continue;
      }

      if (ascii >= 97 && ascii <= 122) {
        returnList += lowerCase[letterIdxList[lowerCase.indexOf(splitVals[i])]];
        continue;
      }

      returnList += nums[numIdxList[nums.indexOf(splitVals[i])]];
    }

    return returnList;
  });

  return splitInput.length > 1 ? splitInput.join('-') : splitInput[0];
}
